<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:s="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/security
             http://www.springframework.org/schema/security/spring-security.xsd">
             
		<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

		<s:http auto-config="true" use-expressions="true">
		
		<!-- 정적 리소스는 모두 접근 허용 -->
		<s:intercept-url pattern="/resources/**" access="permitAll" />
		<s:intercept-url pattern="/meeting/meetinglog" access="permitAll"/>
		
		<!-- 로그인된 상태에서는 로그인이나 회원가입 화면에 접근 못하도록 함 -->
		<s:intercept-url pattern="/loginView*" access="isAnonymous()" />
		<s:intercept-url pattern="/registerUserView" access="isAnonymous()" />

		<!-- 관리자페이지는 관리자만 접근 허용 -->
		<s:intercept-url pattern="/admin/**" access="hasRole('admin')" />
		
		<!-- 로그인 설정 -->
		<s:form-login	
			username-parameter="email" 
			password-parameter="password"
			login-processing-url="/loginAsk" 
			login-page="/" default-target-url="/"
			authentication-failure-handler-ref="userLoginFailHandler" 
			authentication-success-handler-ref="userLoginSuccessHandler"/>

		<!-- 로그아웃 설정 -->
		<s:logout 
			logout-url="/logoutAsk"
			logout-success-url="/"
			invalidate-session="true"
			delete-cookies="true" />
	</s:http>
	
	<!-- 위에서부터 순서대로 적용되니, '허용할 범위 → 금지할 범위' 순으로 작성해야 합니다. 
	같은 범위를 금지부터 하고 허용하면 먼저 순서인 금지만 적용됩니다. -->

	<!-- 표현식											설명
	hasRole('role')				해당 권한이 있으면 요청한 페이지를, 없으면 로그인 페이지로 이동
	hasAnyRole('role1,'role2')	포함된 권한 중 하나라도 있으면 요청한 페이지를, 없으면 로그인 페이지로 이동
	isAuthenticated()			로그인 인증을 받은 사용자는 권한에 관계 없이 허용, 익명 사용자는 로그인 페이지로 이동
	isFullyAuthenticated()		자동 로그인하지 않고 로그인 인증을 한 사용자는 권한에 관계 없이 허용
	isAnonymous()				권한이 없는 익명의 사용자만 접근을 허용함 (로그인되어 권한이 있으면 접근 불가)
	isRememberMe()				자동 로그인 대상 사용자의 경우 접근을 허용
	permitAll					모두 접근 허용
	denyAll						모두 접근 불가 -->
	
	<!-- 스프링 security의 내부 로직으로 처리합니다. 그 처리에 대한 설정입니다. -->

<!-- * username-parameter : 입력한 ID에 대한 파라미터 네임
* password-parameter : 입력한 PW에 대한 파라미터 네임
* login-processing-url : View 페이지의 <form action="/url"> 에서 지정한 URL
* login-page : 서블릿에 넘겨줄 로그인 페이지 URL
* default-target-url : 로그인에 성공하면 보내줄 페이지
* authentication-failure-url : 로그인에 실패하면 보내줄 페이지

View의 <form action="/URL">의 URL은 서블릿에 도달하지 않기 때문에 컨트롤러에서 별도로 작성할 필요가 없습니다. 
컨트롤러에서는 로그인 화면을 분배하는 메소드 하나만 작성하면 되고 나머지 로직은 불필요합니다. -->

	<!-- 권한이 없어서 금지된 URI 접속할 때 보여줄 페이지(403 에러 페이지 대체) -->
	<!-- <s:access-denied-handler error-page="/" /> -->
	
	<beans:bean id="userLoginFailHandler" class="com.greedy.shortcut.member.model.service.UserLoginFailHandler"></beans:bean>
	<beans:bean id="userLoginSuccessHandler" class="com.greedy.shortcut.member.model.service.UserLoginSuccessHandler"></beans:bean>

	<s:authentication-manager>
 		<s:authentication-provider user-service-ref="userLoginService">
 		</s:authentication-provider>
	</s:authentication-manager>

	<beans:bean id="userLoginService" class="com.greedy.shortcut.member.model.service.UserDetailsServiceCustom"></beans:bean>

	<s:authentication-manager>
		<s:authentication-provider ref="userLoginAuthenticationProvider">
		</s:authentication-provider>
	</s:authentication-manager>

	<beans:bean id="userLoginAuthenticationProvider" class="com.greedy.shortcut.member.model.service.UserLoginAuthenticationProvider"></beans:bean>

</beans:beans>